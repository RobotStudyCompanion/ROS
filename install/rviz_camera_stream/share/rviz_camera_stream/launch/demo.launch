import launch
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, LogInfo, PushRosNamespace
from launch.conditions import IfCondition
from launch_ros.actions import Node
from launch.substitutions import LaunchConfiguration


def generate_launch_description():
    use_rviz = LaunchConfiguration('use_rviz', default='true')

    return LaunchDescription([
        DeclareLaunchArgument(
            'use_rviz', default_value='true', description='Launch RViz'),

        # Launch RViz with configuration file
        Node(
            package='rviz2',
            executable='rviz2',
            name='rviz',
            arguments=['-d', '$(find rviz_camera_stream)/config/rviz_camera_stream.rviz'],
            output='screen',
            condition=IfCondition(use_rviz),
        ),

        # Launch static transform publishers for camera1 and camera2
        PushRosNamespace('camera1'),
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='camera_broadcaster',
            arguments=['0.1', '0.1', '-0.5', '0', '0', '0', '1', 'map', 'camera1', '10'],
            output='screen'
        ),
        Node(
            package='ros2topic',
            executable='pub',
            name='camera_info',
            arguments=[
                'camera_info', 'sensor_msgs/msg/CameraInfo',
                '{"header": {"seq": 0, "stamp": {"sec": 0, "nanosec": 0}, "frame_id": "camera1"}, '
                '"height": 480, "width": 640, "distortion_model": "plumb_bob", '
                '"D": [0], "K": [500.0, 0.0, 320, 0.0, 500.0, 240.0, 0.0, 0.0, 1.0], '
                '"R": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], '
                '"P": [500.0, 0.0, 320, 0.0, 0.0, 500, 240, 0.0, 0.0, 0.0, 1.0, 0.0], '
                '"binning_x": 0, "binning_y": 0, "roi": {"x_offset": 0, "y_offset": 0, "height": 480, "width": 640, "do_rectify": false}}'
            ],
            output='screen'
        ),

        # Camera 2
        PushRosNamespace('camera2'),
        Node(
            package='tf2_ros',
            executable='static_transform_publisher',
            name='camera_broadcaster',
            arguments=['0.1', '-0.1', '-2.5', '0.01', '0', '0.02', '1', 'map', 'camera2', '10'],
            output='screen'
        ),
        Node(
            package='ros2topic',
            executable='pub',
            name='camera_info',
            arguments=[
                'camera_info', 'sensor_msgs/msg/CameraInfo',
                '{"header": {"seq": 0, "stamp": {"sec": 0, "nanosec": 0}, "frame_id": "camera2"}, '
                '"height": 720, "width": 1280, "distortion_model": "plumb_bob", '
                '"D": [0], "K": [300.0, 0.0, 640, 0.0, 300.0, 360.0, 0.0, 0.0, 1.0], '
                '"R": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], '
                '"P": [300.0, 0.0, 640, 0.0, 0.0, 300, 360, 0.0, 0.0, 0.0, 1.0, 0.0], '
                '"binning_x": 0, "binning_y": 0, "roi": {"x_offset": 0, "y_offset": 0, "height": 720, "width": 1280, "do_rectify": false}}'
            ],
            output='screen'
        ),

        # Disable unused publishers in RViz namespaces
        Node(
            package='rviz2',
            executable='rviz2',
            name='rviz_namespace_config',
            parameters=[{
                'disable_pub_plugins': [
                    'image_transport/compressed',
                    'image_transport/compressedDepth',
                    'image_transport/theora'
                ]
            }],
            namespace='rviz1/camera1/image',
            output='screen'
        ),
        Node(
            package='rviz2',
            executable='rviz2',
            name='rviz_namespace_config',
            parameters=[{
                'disable_pub_plugins': [
                    'image_transport/compressed',
                    'image_transport/compressedDepth',
                    'image_transport/theora'
                ]
            }],
            namespace='rviz1/camera2/image',
            output='screen'
        )
    ])

